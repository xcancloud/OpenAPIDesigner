export default {
  doc_info: 'Document Info',
  external_doc: 'External Documentation',
  servers: 'Servers',
  security: 'Security',
  tag: 'Tags',
  apis: 'Apis',
  component: 'Components',
  extension: 'Extensions',
  model: 'Models',
  parameter: 'Parameters',
  request_body: 'Request Bodies',
  response: 'Responses',
  header: 'Headers',
  security_schema: 'Security Schemas',
  title:'Title',
  version: 'Version',
  summary: 'Summary',
  desc: 'Description',
  terms_service: 'Terms of service',
  contact_name: 'Contact',
  license: 'License',
  variable: 'Variable',
  add_variable: 'Add variable',
  name: 'name',
  value: 'value',
  server_name_placeholder: 'The URL pointing to the target host. When variables are named within curly braces, variable substitution will be performed. It must be expressed in URI format, with a maximum of 400 characters',
  variabe_desc_placeholder: 'Variable Description, (max length: 400)',
  variabe_name_placeholder: 'Variable Name, (max length: 100)',
  variabe_value_placeholder: 'Variable Value, (max length: 100)',
  external_url: 'External doc link (URL format)',
  external_desc: 'External docs description text',
  type: 'Type',
  add: 'Add',
  security_name_placeholder: 'Security scheme name, which must be unique and will be referenced in security requirements. Maximum length: 100 characters',
  username:'Username',
  security_username_placeholder: 'HTTP Basic Auth username (max length: 200)',
  password: 'Password',
  security_password_placeholder: 'Password for Basic Authentication (max length: 800)',
  token: 'Access token',
  security_bearer_token_placeholder: 'Bearer access token (maximum 800 characters as per RFC 6750)',
  param_name: 'Parameter Name',
  security_apikey_name_placeholder: 'Auth parameter name (API security, 100-char limit)',
  param_value: 'Parameter Value',
  security_apikey_value_placeholder: 'API auth parameter value (max 800 chars)',
  param_in: 'Parameter Location',
  has_token: 'Existing Token',
  genarate_toekn: 'Token generation (OAuth2 flow)',
  token_placeholder: 'Authenticated access token, up to 800 characters',
  input_max_placeholder: 'Maximum input length: {num} characters',
  client_auth: 'Client Authentication',
  auth_url: 'Authorization URL',
  callback_url: 'Callback URL (Redirect URI)',
  token_url: 'Access Token URL',
  refresh_url: 'Refresh Token URL',
  client_id: 'Client ID',
  client_secret: 'Client Secret',
  challenge_method: 'Encryption Method',
  code_verrifier: 'Verification Code',
  scope: 'Scope',
  authorization_code: 'Authorization Code Flow',
  password_credentials: 'Password Gran（Password Credentials）',
  implicit: 'Implicit Flow',
  client_credentials: 'Client Credentials Flow',
  general: 'General',
  request: 'Request',
  security_query_parameter: 'Pass via Query Parameters',
  security_basic_auth_header: 'Authorization via Basic Auth Header',
  security_request_body: 'Transmit via Request Body',
  add_server: 'Add Server',
  extension_value_placeholder: 'Extended input value (supports up to 20,000 characters)',
  title_placeholder: 'API Documentation Title, (max length: 200)',
  summary_placeholder: 'API Documentation Summary, (max length: 400)',
  terms_service_placeholder: 'API Documentation Terms of Service (must be expressed as a URI), (max length: 400)',
  contact_name_placeholder: 'Contact Name, (max length: 200)',
  contact_url_placeholder: 'Contact URL, (max length: 400)',
  contact_email_placeholder: 'Contact Email, (max length: 100)',
  lisence_name_placeholder: 'License Name, (max length: 200)',
  external_url_placeholder: 'External Documentation URL, (max length: 200)',
  
  tag_name_placeholder: 'Tag Name, (max length: 200)',
  tag_external_url_placeholder: 'External Documentation URL for Tags (must be expressed as a URI),(max length: 400)',
  add_tag: 'Add Tag',
  form: 'Form',
  code: 'Code',
  preview: 'Preview',

  name_placeholder: 'Input Name',
  summary_input_placeholder: 'Input Summary',
  tip: 'Tips',
  tip_repeat_content:'Duplicate name detected, please modify and re-enter',
  path_repeat_content: 'Duplicate path detected, please modify and retry',
  method_repeat_content: 'Method already exists, no need to add',
  search: 'Search',
  delete: 'Delete',
  identifier: 'Identifier',
  
  import: '导入',
  export: '导出',
};